(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{X:()=>S});var e="#FC9B45",r="#51A6FF",n="#FFFFFF",i=50,a=50,o="".concat(30,"px Arial"),l="動",c=function(t,e,r,n){return new(r||(r=Promise))((function(i,a){function o(t){try{c(n.next(t))}catch(t){a(t)}}function l(t){try{c(n.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,l)}c((n=n.apply(t,e||[])).next())}))},s=function(t,e){var r,n,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(o=0)),o;)try{if(r=1,n&&(i=2&l[0]?n.return:l[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,l[1])).done)return i;switch(n=0,i&&(l=[2&l[0],i.value]),l[0]){case 0:case 1:i=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,n=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!i||l[1]>i[0]&&l[1]<i[3])){o.label=l[1];break}if(6===l[0]&&o.label<i[1]){o.label=i[1],i=l;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(l);break}i[2]&&o.ops.pop(),o.trys.pop();continue}l=e.call(t,o)}catch(t){l=[6,t],n=0}finally{r=i=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}};function u(t){return c(this,void 0,void 0,(function(){return s(this,(function(e){return[2,new Promise((function(e){return setTimeout(e,t)}))]}))}))}function h(t){S.clearRect(t.x,t.y,t.w,t.h)}function f(t){t.partOfSpeech==l?S.fillStyle=r:S.fillStyle=e;var o=i*t.word.length;S.fillRect(t.rect.x,t.rect.y,o,a),S.fillStyle=n,S.fillText(t.word,t.rect.x+.5*(o-30*t.word.length),t.rect.y+35)}function d(t,e,r){S.beginPath(),S.rect(t.x,t.y,t.w,t.h),S.lineWidth=r,S.strokeStyle=e,S.stroke()}function y(t){return c(this,void 0,void 0,(function(){var e,r,i,a;return s(this,(function(l){switch(l.label){case 0:S.font=o,e=function(t,e){for(var r=[],n=0;n<t.length;n+=20)r.push(t.substring(n,n+20));return r}(t),r=0,l.label=1;case 1:if(!(r<e.length))return[3,6];i=e[r],a=1,l.label=2;case 2:return a<=i.length?(S.fillStyle=n,S.fillText(i.substring(0,a),100,100+35*r),[4,u(40)]):[3,5];case 3:l.sent(),l.label=4;case 4:return a++,[3,2];case 5:return r++,[3,1];case 6:return[2]}}))}))}var p=function(){function t(){this.cardArray=[],this.inventoryTailX=110,this.inventoryTailY=350,this.rect={x:100,y:340,w:600,h:220}}return t.prototype.drawInventory=function(){var t;h(this.rect),t=this.rect,S.fillStyle="#BEBEBE",S.fillRect(t.x,t.y,t.w,t.h);for(var e=0;e<this.cardArray.length;e++)this.cardArray[e].isSelected||f(this.cardArray[e])},t.prototype.addCard=function(t){var e=i*t.Word.length;this.inventoryTailX+10+e>600&&(this.inventoryTailY+=10+a),this.cardArray.push({rect:{x:this.inventoryTailX,y:this.inventoryTailY,w:e,h:a},inventoryX:this.inventoryTailX,inventoryY:this.inventoryTailY,word:t.Word,partOfSpeech:t.PartOfSpeech,isSelected:!1}),this.inventoryTailX=this.inventoryTailX+e+10},t}(),v=function(){function t(t,e,r){this.lineWidth=6,this.rect=t,this.partOfSpeech=e,this.card=r}return t.prototype.drawSlot=function(){h(this.rect),this.partOfSpeech==l?d(this.rect,r,this.lineWidth):d(this.rect,e,this.lineWidth),this.card&&function(t,i,o){t.partOfSpeech==l?S.fillStyle=r:S.fillStyle=e;var c=50*t.word.length,s=i-.5*c,u=o-.5*a;S.fillRect(s,u,c,a),S.fillStyle=n,S.fillText(t.word,s+.5*(c-30*t.word.length),u+35)}(this.card,this.rect.x+.5*this.rect.w,this.rect.y+.5*this.rect.h)},t}();const w=JSON.parse('{"CardTable":[{"ID":0,"Word":"我","PartOfSpeech":"名"},{"ID":1,"Word":"檢視","PartOfSpeech":"動"},{"ID":2,"Word":"密室","PartOfSpeech":"名"},{"ID":3,"Word":"桌子","PartOfSpeech":"名"},{"ID":4,"Word":"門","PartOfSpeech":"名"},{"ID":5,"Word":"移至","PartOfSpeech":"動"},{"ID":6,"Word":"開","PartOfSpeech":"動"}],"SentenceTable":[{"CardID1":0,"CardID2":1,"CardID3":2,"Status":"第一次造句","NewCardID":"[3,4]","DialogueID":1},{"CardID1":0,"CardID2":1,"CardID3":2,"Status":"非第一次造句","DialogueID":2}],"DialogueTable":[{"ID":0,"Dialogue":"這裡是哪裡？「我」醒了過來。發現在自己被困在一間「密室」。我摸著自己的口袋，沒有找到手機，無法對外聯繫。但發現一張詞卡「檢視」。這是做什麼用的？（獲得「密室」、「我」、「檢視」）"},{"ID":1,"Dialogue":"我檢視這密室。看見密室內有一扇「門」與一張「桌子」。沒有別的東西了。"},{"ID":2,"Dialogue":"我已經檢視過這密室。密室內除了一扇門與一張桌子外，沒有其他特別的東西了。"}]}');var b=function(){function t(){var t=this;this.cardTable=new Map,this.sentenceTable=new Map,this.dialogueTable=new Map,this.inventory=new p,this.slotArray=[new v({x:145,y:270,w:150,h:50},"名",null),new v({x:325,y:270,w:150,h:50},l,null),new v({x:505,y:270,w:150,h:50},"名",null)];var e=w;e.CardTable.forEach((function(e){t.cardTable.set(e.ID,{Word:e.Word,PartOfSpeech:e.PartOfSpeech})})),e.SentenceTable.forEach((function(e){t.sentenceTable.set({CardID1:e.CardID1,CardID2:e.CardID2,CardID3:e.CardID3,Status:e.Status},{NewCardID:e.NewCardID,DialogueID:e.DialogueID})})),e.DialogueTable.forEach((function(e){t.dialogueTable.set(e.ID,e.Dialogue)})),console.log("Hello!"+(new Error).stack)}return t.prototype.begin=function(){this.entrySequence()},t.prototype.entrySequence=function(){return t=this,e=void 0,n=function(){return function(t,e){var r,n,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(o=0)),o;)try{if(r=1,n&&(i=2&l[0]?n.return:l[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,l[1])).done)return i;switch(n=0,i&&(l=[2&l[0],i.value]),l[0]){case 0:case 1:i=l;break;case 4:return o.label++,{value:l[1],done:!1};case 5:o.label++,n=l[1],l=[0];continue;case 7:l=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==l[0]&&2!==l[0])){o=0;continue}if(3===l[0]&&(!i||l[1]>i[0]&&l[1]<i[3])){o.label=l[1];break}if(6===l[0]&&o.label<i[1]){o.label=i[1],i=l;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(l);break}i[2]&&o.ops.pop(),o.trys.pop();continue}l=e.call(t,o)}catch(t){l=[6,t],n=0}finally{r=i=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(t){switch(t.label){case 0:return this.drawLevel(),[4,y(this.dialogueTable.get(0))];case 1:return t.sent(),this.inventory.addCard(this.cardTable.get(2)),this.inventory.addCard(this.cardTable.get(0)),this.inventory.addCard(this.cardTable.get(1)),this.drawLevel(),[2]}}))},new((r=void 0)||(r=Promise))((function(i,a){function o(t){try{c(n.next(t))}catch(t){a(t)}}function l(t){try{c(n.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,l)}c((n=n.apply(t,e||[])).next())}));var t,e,r,n},t.prototype.onCanvasClick=function(t){var e=this;this.inventory.cardArray.forEach((function(r){if(n=t,i=r.rect,n.x>i.x&&n.x<i.x+i.w&&n.y<i.y+i.h&&n.y>i.y){var n,i,a=!1;if(r.isSelected){r.rect.x=r.inventoryX,r.rect.y=r.inventoryY,r.isSelected=!1;for(var o=0;o<e.slotArray.length;o++)if(e.slotArray[o].card==r){e.slotArray[o].card=null;break}a=!0}else for(o=0;o<e.slotArray.length;o++){var l=e.slotArray[o];if(l.partOfSpeech==r.partOfSpeech&&!l.card){l.card=r,r.isSelected=!0,r.rect.x=l.rect.x+.5*(l.rect.w-r.rect.w),r.rect.y=l.rect.y,a=!0;break}}a&&e.drawLevel()}}))},t.prototype.drawLevel=function(){for(var t=0;t<this.slotArray.length;t++)this.slotArray[t].drawSlot();this.inventory.drawInventory()},t}(),g=document.getElementById("mainCanvas"),S=g.getContext("2d"),D=new b;g.addEventListener("click",(function(t){var e=function(t,e){var r=t.getBoundingClientRect();return{x:e.clientX-r.left,y:e.clientY-r.top}}(g,t);D.onCanvasClick(e)})),D.begin()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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IjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9zcmMvR2xvYmFsU2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVHlwZURlZmluaXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ludmVudG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2xvdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvTGV2ZWwxL0xldmVsMS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyDlkI3oqZ7poY/oibJcbmV4cG9ydCBjb25zdCBub3VuX2NvbG9yID0gXCIjRkM5QjQ1XCI7XG4vLyDli5XoqZ7poY/oibJcbmV4cG9ydCBjb25zdCB2ZXJiX2NvbG9yID0gXCIjNTFBNkZGXCI7XG4vLyDlsI3oqbHmoYbnmoTmloflrZfpoY/oibJcbmV4cG9ydCBjb25zdCBkaWFsb2d1ZV9jb2xvciA9IFwiI0ZGRkZGRlwiO1xuLy8g5Y2h54mH5qyE55qE6IOM5pmvXG5leHBvcnQgY29uc3QgaW52ZW50b3J5X2JhY2tncm91bmRfY29sb3IgPSBcIiNCRUJFQkVcIjtcbi8vIOipnuWNoeeahOWvrOW6puWWruS9jeOAguipnuWNoeaciW7lgIvlrZfvvIzliYfoqZ7ljaHlr6zluqbngrpuICogY2FyZF93aWR0aF91bml0XG5leHBvcnQgY29uc3QgY2FyZF93aWR0aF91bml0ID0gNTA7XG4vLyDoqZ7ljaHnmoTpq5jluqZcbmV4cG9ydCBjb25zdCBjYXJkX2hlaWdodCA9IDUwO1xuLy8g5bCN6Kmx5qGG55qE5paH5a2X5aSn5bCPXG5leHBvcnQgY29uc3QgZGlhbG9ndWVfZm9udF9zaXplID0gMzA7XG4vLyDlsI3oqbHmoYbnmoTmloflrZflrZfpq5RcbmV4cG9ydCBjb25zdCBkaWFsb2d1ZV9mb250ID0gYCR7ZGlhbG9ndWVfZm9udF9zaXplfXB4IEFyaWFsYDtcbi8vIOWwjeipseahhueahOaJk+Wtl+mWk+malO+8jOWWruS9jeaYr21zXG5leHBvcnQgY29uc3QgdHlwZV9pbnRlcnZhbCA9IDQwO1xuLy8g5bCN6Kmx5qGG55qE5a+s5bqm77yM5Zau5L2N5piv5a2X5pW4XG5leHBvcnQgY29uc3QgZGlhbG9ndWVfd2lkdGggPSAyMDsiLCJleHBvcnQgaW50ZXJmYWNlIElMZXZlbCB7XG4gICAgYmVnaW4oKTogdm9pZDtcbiAgICBvbkNhbnZhc0NsaWNrKG1vdXNlUG9zOiBQb3NpdGlvbik6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIExldmVsVGFibGUgPSB7XG4gICAgQ2FyZFRhYmxlOiBDYXJkRGVmW107XG4gICAgU2VudGVuY2VUYWJsZTogU2VudGVuY2VEZWZbXTtcbiAgICBEaWFsb2d1ZVRhYmxlOiBEaWFsb2d1ZURlZltdO1xufVxuXG5leHBvcnQgdHlwZSBDYXJkVmFsdWUgPSB7XG4gICAgV29yZDogc3RyaW5nO1xuICAgIFBhcnRPZlNwZWVjaDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBTZW50ZW5jZUtleSA9IHtcbiAgICBDYXJkSUQxOiBudW1iZXI7XG4gICAgQ2FyZElEMjogbnVtYmVyO1xuICAgIENhcmRJRDM6IG51bWJlcjtcbiAgICBTdGF0dXM6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2VudGVuY2VWYWx1ZSA9IHtcbiAgICBOZXdDYXJkSUQ6IG51bWJlcltdO1xuICAgIERpYWxvZ3VlSUQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IG5vdW46IHN0cmluZyA9IFwi5ZCNXCI7XG5leHBvcnQgY29uc3QgdmVyYjogc3RyaW5nID0gXCLli5VcIjtcblxuZXhwb3J0IHR5cGUgQ2FyZERlZiA9IHtcbiAgICBJRDogbnVtYmVyO1xuICAgIFdvcmQ6IHN0cmluZztcbiAgICBQYXJ0T2ZTcGVlY2g6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFNlbnRlbmNlRGVmID0ge1xuICAgIENhcmRJRDE6IG51bWJlcjtcbiAgICBDYXJkSUQyOiBudW1iZXI7XG4gICAgQ2FyZElEMzogbnVtYmVyO1xuICAgIFN0YXR1czogc3RyaW5nO1xuICAgIE5ld0NhcmRJRDogbnVtYmVyW107XG4gICAgRGlhbG9ndWVJRDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBEaWFsb2d1ZURlZiA9IHtcbiAgICBJRDogbnVtYmVyO1xuICAgIERpYWxvZ3VlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBDYXJkID0ge1xuICAgIHJlY3Q6IFJlY3Q7XG4gICAgaW52ZW50b3J5WDogbnVtYmVyO1xuICAgIGludmVudG9yeVk6IG51bWJlcjtcbiAgICB3b3JkOiBzdHJpbmc7XG4gICAgcGFydE9mU3BlZWNoOiBzdHJpbmc7XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgUmVjdCA9IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuICAgIHc6IG51bWJlcjtcbiAgICBoOiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBQb3NpdGlvbiA9IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xufSIsImltcG9ydCB7IGNhcmRfaGVpZ2h0LCBjYXJkX3dpZHRoX3VuaXQsIGRpYWxvZ3VlX2NvbG9yLCBkaWFsb2d1ZV9mb250LCBkaWFsb2d1ZV9mb250X3NpemUsIGRpYWxvZ3VlX3dpZHRoLCBub3VuX2NvbG9yLCB0eXBlX2ludGVydmFsLCB2ZXJiX2NvbG9yIH0gZnJvbSBcIi4vR2xvYmFsU2V0dGluZ1wiO1xuaW1wb3J0IHsgQ2FyZCwgUG9zaXRpb24sIFJlY3QsIHZlcmIgfSBmcm9tIFwiLi9UeXBlRGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgY3R4IH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclJlY3QocmVjdDogUmVjdCk6IHZvaWQge1xuICAgIGN0eC5jbGVhclJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDYXJkRnJvbVRvcExlZnQoY2FyZDogQ2FyZCk6IHZvaWQge1xuICAgIGlmIChjYXJkLnBhcnRPZlNwZWVjaCA9PSB2ZXJiKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB2ZXJiX2NvbG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBub3VuX2NvbG9yO1xuICAgIH1cbiAgICBsZXQgY2FyZFdpZHRoID0gY2FyZF93aWR0aF91bml0ICogY2FyZC53b3JkLmxlbmd0aDtcbiAgICBjdHguZmlsbFJlY3QoY2FyZC5yZWN0LngsIGNhcmQucmVjdC55LCBjYXJkV2lkdGgsIGNhcmRfaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gZGlhbG9ndWVfY29sb3I7XG4gICAgY3R4LmZpbGxUZXh0KGNhcmQud29yZCwgY2FyZC5yZWN0LnggKyAoY2FyZFdpZHRoIC0gZGlhbG9ndWVfZm9udF9zaXplICogY2FyZC53b3JkLmxlbmd0aCkgKiAuNSwgY2FyZC5yZWN0LnkgKyAzNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3Q2FyZEZyb21DZW50ZXIoY2FyZDogQ2FyZCwgY2VudGVyWDogbnVtYmVyLCBjZW50ZXJZOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoY2FyZC5wYXJ0T2ZTcGVlY2ggPT0gdmVyYikge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdmVyYl9jb2xvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gbm91bl9jb2xvcjtcbiAgICB9XG4gICAgbGV0IGNhcmRXaWR0aCA9IDUwICogY2FyZC53b3JkLmxlbmd0aDtcbiAgICBsZXQgeCA9IGNlbnRlclggLSBjYXJkV2lkdGggKiAuNTtcbiAgICBsZXQgeSA9IGNlbnRlclkgLSBjYXJkX2hlaWdodCAqIC41O1xuICAgIGN0eC5maWxsUmVjdCh4LCB5LCBjYXJkV2lkdGgsIGNhcmRfaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gZGlhbG9ndWVfY29sb3I7XG4gICAgY3R4LmZpbGxUZXh0KGNhcmQud29yZCwgeCArIChjYXJkV2lkdGggLSBkaWFsb2d1ZV9mb250X3NpemUgKiBjYXJkLndvcmQubGVuZ3RoKSAqIC41LCB5ICsgMzUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0ZpbGxlZFJlY3QocmVjdDogUmVjdCwgY29sb3I6IHN0cmluZyk6IHZvaWQge1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguZmlsbFJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdIb2xsb3dSZWN0KHJlY3Q6IFJlY3QsIGNvbG9yOiBzdHJpbmcsIGxpbmVXaWR0aDogbnVtYmVyKTogdm9pZCB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguc3Ryb2tlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFN0cmluZyhzdHI6IHN0cmluZywgTjogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IE4pIHtcbiAgICAgICAgYXJyLnB1c2goc3RyLnN1YnN0cmluZyhpLCBpICsgTikpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXkodGV4dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY3R4LmZvbnQgPSBkaWFsb2d1ZV9mb250O1xuICAgIGxldCB0ZXh0U3BsaXQgPSBzcGxpdFN0cmluZyh0ZXh0LCBkaWFsb2d1ZV93aWR0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0U3BsaXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUZXh0ID0gdGV4dFNwbGl0W2ldO1xuICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8PSBjdXJyZW50VGV4dC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGRpYWxvZ3VlX2NvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGN1cnJlbnRUZXh0LnN1YnN0cmluZygwLCBqKSwgMTAwLCAxMDAgKyAzNSAqIGkpO1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAodHlwZV9pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb3VzZVBvcyhjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBldmVudDogTW91c2VFdmVudCk6IFBvc2l0aW9uIHtcbiAgICB2YXIgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0LFxuICAgICAgICB5OiBldmVudC5jbGllbnRZIC0gcmVjdC50b3AsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5zaWRlKHBvczogUG9zaXRpb24sIHJlY3Q6IFJlY3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcG9zLnggPiByZWN0LnggJiYgcG9zLnggPCByZWN0LnggKyByZWN0LncgJiZcbiAgICAgICAgcG9zLnkgPCByZWN0LnkgKyByZWN0LmggJiYgcG9zLnkgPiByZWN0Lnk7XG59XG4iLCJpbXBvcnQgeyBjYXJkX2hlaWdodCwgY2FyZF93aWR0aF91bml0LCBpbnZlbnRvcnlfYmFja2dyb3VuZF9jb2xvciB9IGZyb20gXCIuL0dsb2JhbFNldHRpbmdcIjtcbmltcG9ydCB7IENhcmQsIENhcmRWYWx1ZSwgUmVjdCB9IGZyb20gXCIuL1R5cGVEZWZpbml0aW9uXCI7XG5pbXBvcnQgeyBjbGVhclJlY3QsIGRyYXdDYXJkRnJvbVRvcExlZnQsIGRyYXdGaWxsZWRSZWN0IH0gZnJvbSBcIi4vVXRpbGl0eVwiO1xuXG5leHBvcnQgY2xhc3MgSW52ZW50b3J5IHtcbiAgICBwdWJsaWMgY2FyZEFycmF5OiBDYXJkW10gPSBbXTtcblxuICAgIHByaXZhdGUgaW52ZW50b3J5VGFpbFg6IG51bWJlciA9IDExMDtcbiAgICBwcml2YXRlIGludmVudG9yeVRhaWxZOiBudW1iZXIgPSAzNTA7XG4gICAgcHJpdmF0ZSByZWFkb25seSByZWN0OiBSZWN0ID0ge1xuICAgICAgICB4OiAxMDAsXG4gICAgICAgIHk6IDM0MCxcbiAgICAgICAgdzogNjAwLFxuICAgICAgICBoOiAyMjBcbiAgICB9O1xuXG4gICAgcHVibGljIGRyYXdJbnZlbnRvcnkoKTogdm9pZCB7XG4gICAgICAgIGNsZWFyUmVjdCh0aGlzLnJlY3QpO1xuICAgICAgICBkcmF3RmlsbGVkUmVjdCh0aGlzLnJlY3QsIGludmVudG9yeV9iYWNrZ3JvdW5kX2NvbG9yKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2FyZEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYXJkQXJyYXlbaV0uaXNTZWxlY3RlZCkgY29udGludWU7XG4gICAgICAgICAgICBkcmF3Q2FyZEZyb21Ub3BMZWZ0KHRoaXMuY2FyZEFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRDYXJkKGNhcmRJbmZvOiBDYXJkVmFsdWUpOiB2b2lkIHtcbiAgICAgICAgbGV0IGNhcmRXaWR0aCA9IGNhcmRfd2lkdGhfdW5pdCAqIGNhcmRJbmZvLldvcmQubGVuZ3RoO1xuICAgICAgICBsZXQgbmV4dFRhaWxYID0gdGhpcy5pbnZlbnRvcnlUYWlsWCArIDEwICsgY2FyZFdpZHRoO1xuICAgICAgICBpZiAobmV4dFRhaWxYID4gNjAwKSB7XG4gICAgICAgICAgICB0aGlzLmludmVudG9yeVRhaWxZICs9IDEwICsgY2FyZF9oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYXJkQXJyYXkucHVzaCh7XG4gICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5pbnZlbnRvcnlUYWlsWCxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmludmVudG9yeVRhaWxZLFxuICAgICAgICAgICAgICAgIHc6IGNhcmRXaWR0aCxcbiAgICAgICAgICAgICAgICBoOiBjYXJkX2hlaWdodCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnZlbnRvcnlYOiB0aGlzLmludmVudG9yeVRhaWxYLFxuICAgICAgICAgICAgaW52ZW50b3J5WTogdGhpcy5pbnZlbnRvcnlUYWlsWSxcbiAgICAgICAgICAgIHdvcmQ6IGNhcmRJbmZvLldvcmQsXG4gICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IGNhcmRJbmZvLlBhcnRPZlNwZWVjaCxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludmVudG9yeVRhaWxYID0gdGhpcy5pbnZlbnRvcnlUYWlsWCArIGNhcmRXaWR0aCArIDEwO1xuICAgIH1cbn0iLCJpbXBvcnQgeyB2ZXJiX2NvbG9yLCBub3VuX2NvbG9yIH0gZnJvbSBcIi4vR2xvYmFsU2V0dGluZ1wiO1xuaW1wb3J0IHsgQ2FyZCwgUmVjdCwgdmVyYiB9IGZyb20gXCIuL1R5cGVEZWZpbml0aW9uXCI7XG5pbXBvcnQge2NsZWFyUmVjdCwgZHJhd0NhcmRGcm9tQ2VudGVyLCBkcmF3SG9sbG93UmVjdH0gZnJvbSBcIi4vVXRpbGl0eVwiO1xuXG5leHBvcnQgY2xhc3MgU2xvdHtcbiAgICBwdWJsaWMgcmVjdDogUmVjdDtcbiAgICBwdWJsaWMgcGFydE9mU3BlZWNoOiBzdHJpbmc7XG4gICAgcHVibGljIGNhcmQ6IENhcmQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBsaW5lV2lkdGggPSA2O1xuXG4gICAgY29uc3RydWN0b3IocmVjdDogUmVjdCwgcGFydE9mU3BlZWNoOiBzdHJpbmcsIGNhcmQ6IENhcmQpe1xuICAgICAgICB0aGlzLnJlY3QgPSByZWN0O1xuICAgICAgICB0aGlzLnBhcnRPZlNwZWVjaCA9IHBhcnRPZlNwZWVjaDtcbiAgICAgICAgdGhpcy5jYXJkID0gY2FyZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd1Nsb3QoKTogdm9pZCB7XG4gICAgICAgIGNsZWFyUmVjdCh0aGlzLnJlY3QpO1xuICAgICAgICBpZiAodGhpcy5wYXJ0T2ZTcGVlY2ggPT0gdmVyYikge1xuICAgICAgICAgICAgZHJhd0hvbGxvd1JlY3QodGhpcy5yZWN0LCB2ZXJiX2NvbG9yLCB0aGlzLmxpbmVXaWR0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcmF3SG9sbG93UmVjdCh0aGlzLnJlY3QsIG5vdW5fY29sb3IsIHRoaXMubGluZVdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jYXJkKSB7XG4gICAgICAgICAgICBkcmF3Q2FyZEZyb21DZW50ZXIodGhpcy5jYXJkLCB0aGlzLnJlY3QueCArIHRoaXMucmVjdC53ICogLjUsIHRoaXMucmVjdC55ICsgdGhpcy5yZWN0LmggKiAuNSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgSW52ZW50b3J5IH0gZnJvbSBcIi4uL0ludmVudG9yeVwiO1xuaW1wb3J0IHsgQ2FyZFZhbHVlLCBJTGV2ZWwsIExldmVsVGFibGUsIFBvc2l0aW9uLCBTZW50ZW5jZUtleSwgU2VudGVuY2VWYWx1ZSwgbm91biwgdmVyYiB9IGZyb20gXCIuLi9UeXBlRGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgc2F5LCBpc0luc2lkZSB9IGZyb20gXCIuLi9VdGlsaXR5XCI7XG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIi4uL1Nsb3RcIjtcbmltcG9ydCBsZXZlbFRhYmxlSnNvbiBmcm9tICcuL0xldmVsMVRhYmxlLmpzb24nO1xuXG5leHBvcnQgY2xhc3MgTGV2ZWwxIGltcGxlbWVudHMgSUxldmVsIHtcbiAgICBwcml2YXRlIGludmVudG9yeTogSW52ZW50b3J5O1xuICAgIHByaXZhdGUgc2xvdEFycmF5OiBTbG90W107XG4gICAgcHJpdmF0ZSByZWFkb25seSBjYXJkVGFibGUgPSBuZXcgTWFwPG51bWJlciwgQ2FyZFZhbHVlPigpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VudGVuY2VUYWJsZSA9IG5ldyBNYXA8U2VudGVuY2VLZXksIFNlbnRlbmNlVmFsdWU+KCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkaWFsb2d1ZVRhYmxlID0gbmV3IE1hcDxudW1iZXIsIHN0cmluZz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmludmVudG9yeSA9IG5ldyBJbnZlbnRvcnkoKTtcbiAgICAgICAgdGhpcy5zbG90QXJyYXkgPSBbXG4gICAgICAgICAgICBuZXcgU2xvdCh7IHg6IDE0NSwgeTogMjcwLCB3OiAxNTAsIGg6IDUwLCB9LCBub3VuLCBudWxsKSxcbiAgICAgICAgICAgIG5ldyBTbG90KHsgeDogMzI1LCB5OiAyNzAsIHc6IDE1MCwgaDogNTAgfSwgdmVyYiwgbnVsbCksXG4gICAgICAgICAgICBuZXcgU2xvdCh7IHg6IDUwNSwgeTogMjcwLCB3OiAxNTAsIGg6IDUwIH0sIG5vdW4sIG51bGwpXG4gICAgICAgIF07XG4gICAgICAgIGxldCBsZXZlbFRhYmxlUmF3OiBMZXZlbFRhYmxlID0gbGV2ZWxUYWJsZUpzb24gYXMgTGV2ZWxUYWJsZTtcblxuICAgICAgICBsZXZlbFRhYmxlUmF3LkNhcmRUYWJsZS5mb3JFYWNoKGNhcmQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYXJkVGFibGUuc2V0KGNhcmQuSUQsIHtcbiAgICAgICAgICAgICAgICBXb3JkOiBjYXJkLldvcmQsXG4gICAgICAgICAgICAgICAgUGFydE9mU3BlZWNoOiBjYXJkLlBhcnRPZlNwZWVjaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXZlbFRhYmxlUmF3LlNlbnRlbmNlVGFibGUuZm9yRWFjaChzZW50ZW5jZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlbnRlbmNlVGFibGUuc2V0KHtcbiAgICAgICAgICAgICAgICBDYXJkSUQxOiBzZW50ZW5jZS5DYXJkSUQxLFxuICAgICAgICAgICAgICAgIENhcmRJRDI6IHNlbnRlbmNlLkNhcmRJRDIsXG4gICAgICAgICAgICAgICAgQ2FyZElEMzogc2VudGVuY2UuQ2FyZElEMyxcbiAgICAgICAgICAgICAgICBTdGF0dXM6IHNlbnRlbmNlLlN0YXR1cyxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBOZXdDYXJkSUQ6IHNlbnRlbmNlLk5ld0NhcmRJRCxcbiAgICAgICAgICAgICAgICBEaWFsb2d1ZUlEOiBzZW50ZW5jZS5EaWFsb2d1ZUlEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldmVsVGFibGVSYXcuRGlhbG9ndWVUYWJsZS5mb3JFYWNoKGRpYWxvZ3VlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9ndWVUYWJsZS5zZXQoZGlhbG9ndWUuSUQsIGRpYWxvZ3VlLkRpYWxvZ3VlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJIZWxsbyFcIiArIG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmVnaW4oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZW50cnlTZXF1ZW5jZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZW50cnlTZXF1ZW5jZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5kcmF3TGV2ZWwoKTtcbiAgICAgICAgYXdhaXQgc2F5KHRoaXMuZGlhbG9ndWVUYWJsZS5nZXQoMCkpO1xuICAgICAgICB0aGlzLmludmVudG9yeS5hZGRDYXJkKHRoaXMuY2FyZFRhYmxlLmdldCgyKSk7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5LmFkZENhcmQodGhpcy5jYXJkVGFibGUuZ2V0KDApKTtcbiAgICAgICAgdGhpcy5pbnZlbnRvcnkuYWRkQ2FyZCh0aGlzLmNhcmRUYWJsZS5nZXQoMSkpO1xuICAgICAgICB0aGlzLmRyYXdMZXZlbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkNhbnZhc0NsaWNrKG1vdXNlUG9zOiBQb3NpdGlvbik6IHZvaWQge1xuICAgICAgICB0aGlzLmludmVudG9yeS5jYXJkQXJyYXkuZm9yRWFjaChjYXJkID0+IHtcbiAgICAgICAgICAgIGlmICghaXNJbnNpZGUobW91c2VQb3MsIGNhcmQucmVjdCkpIHJldHVybjtcbiAgICAgICAgICAgIGxldCBuZWVkVG9SZWRyYXdMZXZlbCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcmQuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGNhcmQucmVjdC54ID0gY2FyZC5pbnZlbnRvcnlYO1xuICAgICAgICAgICAgICAgIGNhcmQucmVjdC55ID0gY2FyZC5pbnZlbnRvcnlZO1xuICAgICAgICAgICAgICAgIGNhcmQuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbG90QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2xvdEFycmF5W2ldLmNhcmQgPT0gY2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbG90QXJyYXlbaV0uY2FyZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZWVkVG9SZWRyYXdMZXZlbCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbG90QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNsb3QgPSB0aGlzLnNsb3RBcnJheVtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3QucGFydE9mU3BlZWNoID09IGNhcmQucGFydE9mU3BlZWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNsb3QuY2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuY2FyZCA9IGNhcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZC5pc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkLnJlY3QueCA9IHNsb3QucmVjdC54ICsgKHNsb3QucmVjdC53IC0gY2FyZC5yZWN0LncpICogLjU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZC5yZWN0LnkgPSBzbG90LnJlY3QueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkVG9SZWRyYXdMZXZlbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZWVkVG9SZWRyYXdMZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xldmVsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd0xldmVsKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2xvdEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNsb3RBcnJheVtpXS5kcmF3U2xvdCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW52ZW50b3J5LmRyYXdJbnZlbnRvcnkoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgTGV2ZWwxIH0gZnJvbSBcIi4vTGV2ZWwxL0xldmVsMVwiO1xuaW1wb3J0IHsgSUxldmVsLCBQb3NpdGlvbiB9IGZyb20gXCIuL1R5cGVEZWZpbml0aW9uXCI7XG5pbXBvcnQgeyBnZXRNb3VzZVBvcyB9IGZyb20gXCIuL1V0aWxpdHlcIjtcblxubGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5DYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5leHBvcnQgbGV0IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxubGV0IGxldmVsOiBJTGV2ZWwgPSBuZXcgTGV2ZWwxKCk7XG5cbmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgbGV0IG1vdXNlUG9zOiBQb3NpdGlvbiA9IGdldE1vdXNlUG9zKGNhbnZhcywgZXZ0KTtcbiAgbGV2ZWwub25DYW52YXNDbGljayhtb3VzZVBvcyk7XG59KTtcblxubGV2ZWwuYmVnaW4oKTsiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJub3VuX2NvbG9yIiwidmVyYl9jb2xvciIsImRpYWxvZ3VlX2NvbG9yIiwiY2FyZF93aWR0aF91bml0IiwiY2FyZF9oZWlnaHQiLCJkaWFsb2d1ZV9mb250IiwidmVyYiIsInNsZWVwIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjbGVhclJlY3QiLCJyZWN0IiwiY3R4IiwieCIsInkiLCJ3IiwiaCIsImRyYXdDYXJkRnJvbVRvcExlZnQiLCJjYXJkIiwicGFydE9mU3BlZWNoIiwiZmlsbFN0eWxlIiwiY2FyZFdpZHRoIiwid29yZCIsImxlbmd0aCIsImZpbGxSZWN0IiwiZmlsbFRleHQiLCJkcmF3SG9sbG93UmVjdCIsImNvbG9yIiwibGluZVdpZHRoIiwiYmVnaW5QYXRoIiwic3Ryb2tlU3R5bGUiLCJzdHJva2UiLCJzYXkiLCJ0ZXh0IiwiZm9udCIsInRleHRTcGxpdCIsInN0ciIsIk4iLCJhcnIiLCJpIiwicHVzaCIsInN1YnN0cmluZyIsInNwbGl0U3RyaW5nIiwiY3VycmVudFRleHQiLCJqIiwiY2FyZEFycmF5IiwiaW52ZW50b3J5VGFpbFgiLCJpbnZlbnRvcnlUYWlsWSIsImRyYXdJbnZlbnRvcnkiLCJ0aGlzIiwiaXNTZWxlY3RlZCIsImFkZENhcmQiLCJjYXJkSW5mbyIsIldvcmQiLCJpbnZlbnRvcnlYIiwiaW52ZW50b3J5WSIsIlBhcnRPZlNwZWVjaCIsImRyYXdTbG90IiwiY2VudGVyWCIsImNlbnRlclkiLCJkcmF3Q2FyZEZyb21DZW50ZXIiLCJjYXJkVGFibGUiLCJNYXAiLCJzZW50ZW5jZVRhYmxlIiwiZGlhbG9ndWVUYWJsZSIsImludmVudG9yeSIsIkludmVudG9yeSIsInNsb3RBcnJheSIsIlNsb3QiLCJsZXZlbFRhYmxlUmF3IiwiQ2FyZFRhYmxlIiwiZm9yRWFjaCIsInNldCIsIklEIiwiU2VudGVuY2VUYWJsZSIsInNlbnRlbmNlIiwiQ2FyZElEMSIsIkNhcmRJRDIiLCJDYXJkSUQzIiwiU3RhdHVzIiwiTmV3Q2FyZElEIiwiRGlhbG9ndWVJRCIsIkRpYWxvZ3VlVGFibGUiLCJkaWFsb2d1ZSIsIkRpYWxvZ3VlIiwiY29uc29sZSIsImxvZyIsIkVycm9yIiwic3RhY2siLCJiZWdpbiIsImVudHJ5U2VxdWVuY2UiLCJkcmF3TGV2ZWwiLCJvbkNhbnZhc0NsaWNrIiwibW91c2VQb3MiLCJwb3MiLCJuZWVkVG9SZWRyYXdMZXZlbCIsInNsb3QiLCJjYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImxldmVsIiwiTGV2ZWwxIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsImV2ZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImxlZnQiLCJjbGllbnRZIiwidG9wIiwiZ2V0TW91c2VQb3MiXSwic291cmNlUm9vdCI6IiJ9