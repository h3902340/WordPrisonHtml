{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./src/GlobalSetting.ts","webpack:///./src/TypeDefinition.ts","webpack:///./src/Utility.ts","webpack:///./src/Inventory.ts","webpack:///./src/TypeWriter.ts","webpack:///./src/Slot.ts","webpack:///./src/Level1/Level1.ts","webpack:///./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// 名詞顏色\nexport const noun_color = \"#FC9B45\";\n// 動詞顏色\nexport const verb_color = \"#51A6FF\";\n// 對話框的文字顏色\nexport const dialogue_color = \"#FFFFFF\";\n// 卡片欄的背景\nexport const inventory_background_color = \"#BEBEBE\";\n// 詞卡的寬度單位。詞卡有n個字，則詞卡寬度為n * card_width_unit\nexport const card_width_unit = 50;\n// 詞卡的高度\nexport const card_height = 50;\n// 對話框的文字大小\nexport const dialogue_font_size = 30;\n// 對話框的文字字體\nexport const dialogue_font = `${dialogue_font_size}px Arial`;\n// 對話框的打字間隔，單位是ms\nexport const type_interval = 20;\n// 對話框的寬度，單位是字數\nexport const dialogue_width = 20;","export interface ILevel {\n    begin(): void;\n    onCanvasClick(mousePos: Position): void;\n}\n\nexport type SentenceKey = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n}\n\nexport const noun: string = \"名\";\nexport const verb: string = \"動\";\n\nexport type CardDef = {\n    ID: number;\n    Word: string;\n    PartOfSpeech: string;\n};\n\nexport type SentenceDef = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n    Condition: { [k: string]: number };\n    NewCardID: number[];\n    DialogueID: number;\n    Consequence: { [k: string]: number };\n}\n\nexport type DialogueDef = {\n    ID: number;\n    Dialogue: string;\n};\n\nexport type Card = {\n    rect: Rect;\n    inventoryX: number;\n    inventoryY: number;\n    cardInfo: CardDef;\n    isSelected: boolean;\n}\n\nexport type Rect = {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n};\n\nexport type Position = {\n    x: number;\n    y: number;\n}","import { card_height, card_width_unit, dialogue_color, dialogue_font_size, noun_color, verb_color } from \"./GlobalSetting\";\nimport { Card, Position, Rect, verb } from \"./TypeDefinition\";\nimport { ctx } from \"./index\";\n\nexport async function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function clearRect(rect: Rect): void {\n    ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawCardFromTopLeft(card: Card): void {\n    if (card.cardInfo.PartOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = card_width_unit * card.cardInfo.Word.length;\n    ctx.fillRect(card.rect.x, card.rect.y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.cardInfo.Word, card.rect.x + (cardWidth - dialogue_font_size * card.cardInfo.Word.length) * .5, card.rect.y + 35);\n}\n\nexport function drawCardFromCenter(card: Card, centerX: number, centerY: number): void {\n    if (card.cardInfo.PartOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = 50 * card.cardInfo.Word.length;\n    let x = centerX - cardWidth * .5;\n    let y = centerY - card_height * .5;\n    ctx.fillRect(x, y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.cardInfo.Word, x + (cardWidth - dialogue_font_size * card.cardInfo.Word.length) * .5, y + 35);\n}\n\nexport function drawFilledRect(rect: Rect, color: string): void {\n    ctx.fillStyle = color;\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawHollowRect(rect: Rect, color: string, lineWidth: number): void {\n    ctx.beginPath();\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.stroke();\n}\n\nexport function splitString(str: string, N: number): string[] {\n    const arr = [];\n\n    for (let i = 0; i < str.length; i += N) {\n        arr.push(str.substring(i, i + N));\n    }\n\n    return arr;\n}\n\nexport function getMousePos(canvas: HTMLCanvasElement, event: MouseEvent): Position {\n    var rect = canvas.getBoundingClientRect();\n    return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top,\n    };\n}\n\nexport function isInside(pos: Position, rect: Rect): boolean {\n    return pos.x > rect.x && pos.x < rect.x + rect.w &&\n        pos.y < rect.y + rect.h && pos.y > rect.y;\n}\n","import { card_height, card_width_unit, inventory_background_color } from \"./GlobalSetting\";\nimport { Card, CardDef, Rect } from \"./TypeDefinition\";\nimport { clearRect, drawCardFromTopLeft, drawFilledRect } from \"./Utility\";\n\nexport class Inventory {\n    public cardArray: Card[] = [];\n\n    private inventoryTailX: number = 110;\n    private inventoryTailY: number = 350;\n    private readonly rect: Rect = {\n        x: 100,\n        y: 340,\n        w: 600,\n        h: 220\n    };\n\n    public drawInventory(): void {\n        clearRect(this.rect);\n        drawFilledRect(this.rect, inventory_background_color)\n        for (let i = 0; i < this.cardArray.length; i++) {\n            if (this.cardArray[i].isSelected) continue;\n            drawCardFromTopLeft(this.cardArray[i]);\n        }\n    }\n\n    public addCard(cardInfo: CardDef): void {\n        let cardWidth = card_width_unit * cardInfo.Word.length;\n        let nextTailX = this.inventoryTailX + 10 + cardWidth;\n        if (nextTailX > 600) {\n            this.inventoryTailY += 10 + card_height;\n        }\n        this.cardArray.push({\n            rect: {\n                x: this.inventoryTailX,\n                y: this.inventoryTailY,\n                w: cardWidth,\n                h: card_height,\n            },\n            inventoryX: this.inventoryTailX,\n            inventoryY: this.inventoryTailY,\n            cardInfo: cardInfo,\n            isSelected: false\n        });\n        this.inventoryTailX = this.inventoryTailX + cardWidth + 10;\n    }\n}","import { dialogue_font, dialogue_width, dialogue_color, type_interval, dialogue_font_size } from \"./GlobalSetting\";\nimport { Rect } from \"./TypeDefinition\";\nimport { clearRect, splitString, sleep } from \"./Utility\";\nimport { ctx } from \"./index\";\n\nexport class TypeWriter {\n    private rect: Rect;\n    private readonly verticalInterval: number = 5;\n\n    constructor(rect: Rect) {\n        this.rect = rect;\n    }\n\n    public async say(text: string): Promise<void> {\n        clearRect(this.rect);\n        ctx.font = dialogue_font;\n        let textSplit = splitString(text, dialogue_width);\n        for (let i = 0; i < textSplit.length; i++) {\n            let currentText = textSplit[i];\n            for (let j = 1; j <= currentText.length; j++) {\n                ctx.fillStyle = dialogue_color;\n                ctx.fillText(currentText.substring(0, j), this.rect.x,\n                    // fillText是以y的上界為底線畫文字。所以畫文字時，y要加一個dialogue_font_size\n                    this.rect.y + dialogue_font_size + (dialogue_font_size + this.verticalInterval) * i);\n                await sleep(type_interval);\n            }\n        }\n    }\n}","import { verb_color, noun_color } from \"./GlobalSetting\";\nimport { Card, Rect, verb } from \"./TypeDefinition\";\nimport { clearRect, drawCardFromCenter, drawHollowRect } from \"./Utility\";\n\nexport class Slot {\n    public rect: Rect;\n    public partOfSpeech: string;\n    private card: Card;\n    private readonly lineWidth = 6;\n\n    constructor(rect: Rect, partOfSpeech: string, card: Card) {\n        this.rect = rect;\n        this.partOfSpeech = partOfSpeech;\n        this.card = card;\n    }\n\n    public drawSlot(): void {\n        clearRect(this.rect);\n        if (this.partOfSpeech == verb) {\n            drawHollowRect(this.rect, verb_color, this.lineWidth);\n        } else {\n            drawHollowRect(this.rect, noun_color, this.lineWidth);\n        }\n        if (this.card) {\n            drawCardFromCenter(this.card, this.rect.x + this.rect.w * .5, this.rect.y + this.rect.h * .5);\n        }\n    }\n\n    public InsertCard(card: Card): void {\n        this.card = card;\n        card.isSelected = true;\n        card.rect.x = this.rect.x + (this.rect.w - card.rect.w) * .5;\n        card.rect.y = this.rect.y;\n    }\n\n    public RemoveCard(): void {\n        this.card = null;\n    }\n\n    public IsCardEqual(card: Card): boolean {\n        return this.card == card;\n    }\n\n    public GetCardID(): number {\n        if (!this.card) return -1;\n        return this.card.cardInfo.ID;\n    }\n\n    public HasCard(): boolean {\n        return this.card != null;\n    }\n}","import { Inventory } from \"../Inventory\";\nimport { TypeWriter } from \"../TypeWriter\";\nimport { CardDef, DialogueDef, ILevel, Position, SentenceDef, noun, verb } from \"../TypeDefinition\";\nimport { isInside } from \"../Utility\";\nimport { Slot } from \"../Slot\";\nimport cardTableJson from './CardTable.json';\nimport dialogueTableJson from './DialogueTable.json';\nimport sentenceTableJson from './SentenceTable.json';\n\nexport class Level1 implements ILevel {\n    private readonly inventory: Inventory;\n    private readonly slotArray: Slot[];\n    private readonly typeWriter: TypeWriter;\n    private readonly cardTable = new Map<number, CardDef>();\n    private readonly sentenceTable: SentenceDef[];\n    private readonly dialogueTable = new Map<number, string>();\n    private levelState: { [k: string]: number };\n\n    constructor() {\n        this.inventory = new Inventory();\n        this.slotArray = [\n            new Slot({ x: 145, y: 270, w: 150, h: 50, }, noun, null),\n            new Slot({ x: 325, y: 270, w: 150, h: 50 }, verb, null),\n            new Slot({ x: 505, y: 270, w: 150, h: 50 }, noun, null)\n        ];\n        this.typeWriter = new TypeWriter({ x: 100, y: 70, w: 600, h: 190 });\n\n        let cardTableRaw: CardDef[] = cardTableJson as CardDef[];\n\n        cardTableRaw.forEach(card => {\n            this.cardTable.set(card.ID, card);\n        });\n\n        this.sentenceTable = sentenceTableJson as SentenceDef[];\n\n        let dialogueTableRaw: DialogueDef[] = dialogueTableJson as DialogueDef[];\n        dialogueTableRaw.forEach(dialogue => {\n            this.dialogueTable.set(dialogue.ID, dialogue.Dialogue);\n        });\n\n        this.levelState = {\n            MeInspectRoom: 0,\n            MeInspectDoor: 0,\n            MoveToGot: 0,\n        };\n    }\n\n    public begin(): void {\n        this.entrySequence();\n    }\n\n    private async entrySequence(): Promise<void> {\n        for (let i = 0; i < this.slotArray.length; i++) {\n            this.slotArray[i].drawSlot();\n        }\n        this.inventory.drawInventory();\n        await this.typeWriter.say(this.dialogueTable.get(0));\n        this.inventory.addCard(this.cardTable.get(2));\n        this.inventory.addCard(this.cardTable.get(0));\n        this.inventory.addCard(this.cardTable.get(1));\n        this.inventory.drawInventory();\n    }\n\n    public onCanvasClick(mousePos: Position): void {\n        this.inventory.cardArray.forEach(card => {\n            if (!isInside(mousePos, card.rect)) return;\n            // 如果點選到的詞卡已經輸入，則把詞卡放回inventory。\n            if (card.isSelected) {\n                card.rect.x = card.inventoryX;\n                card.rect.y = card.inventoryY;\n                card.isSelected = false;\n                for (let i = 0; i < this.slotArray.length; i++) {\n                    if (this.slotArray[i].IsCardEqual(card)) {\n                        this.slotArray[i].RemoveCard();\n                        this.slotArray[i].drawSlot();\n                        this.inventory.drawInventory();\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // 如果點選到的詞卡還沒有輸入，尋找一個空的slot輸入。\n            for (let i = 0; i < this.slotArray.length; i++) {\n                let slot = this.slotArray[i];\n                if (slot.partOfSpeech == card.cardInfo.PartOfSpeech) {\n                    if (slot.IsCardEqual(null)) {\n                        slot.InsertCard(card);\n                        slot.drawSlot();\n                        this.inventory.drawInventory();\n                        break;\n                    }\n                }\n            }\n\n            if (!this.isSlotFull()) return;\n\n            // 如果三個輸入框都滿了。檢查造句。\n            for (let i = 0; i < this.sentenceTable.length; i++) {\n                let sentence: SentenceDef = this.sentenceTable[i];\n                if (!this.isSentenceMatch(sentence)) continue;\n                let isConditionMet: boolean = true;\n                for (let stateKey in sentence.Condition) {\n                    if (this.levelState[stateKey] != sentence.Condition[stateKey]) {\n                        isConditionMet = false;\n                        break;\n                    }\n                }\n    \n                if (isConditionMet) {\n                    this.SayDialogue(sentence);\n                    if (sentence.Consequence) {\n                        for (let stateKey in sentence.Consequence) {\n                            this.levelState[stateKey] = sentence.Consequence[stateKey];\n                        }\n                    }\n                    break;\n                }\n            }\n        });\n    }\n\n    private isSlotFull(): boolean {\n        return this.slotArray[0].HasCard() &&\n            this.slotArray[1].HasCard() &&\n            this.slotArray[2].HasCard();\n    }\n\n    private isSentenceMatch(sentence: SentenceDef): boolean {\n        return sentence.CardID1 == this.slotArray[0].GetCardID() &&\n            sentence.CardID2 == this.slotArray[1].GetCardID() &&\n            sentence.CardID3 == this.slotArray[2].GetCardID()\n    }\n\n    private async SayDialogue(sentenceInfo: SentenceDef): Promise<void> {\n        await this.typeWriter.say(this.dialogueTable.get(sentenceInfo.DialogueID));\n        if (sentenceInfo.NewCardID) {\n            for (let i = 0; i < sentenceInfo.NewCardID.length; i++) {\n                this.inventory.addCard(this.cardTable.get(sentenceInfo.NewCardID[i]));\n            }\n            this.inventory.drawInventory();\n        }\n    }\n}","import { Level1 } from \"./Level1/Level1\";\nimport { ILevel, Position } from \"./TypeDefinition\";\nimport { getMousePos } from \"./Utility\";\n\nlet canvas: HTMLCanvasElement = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\nexport let ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\nlet level: ILevel = new Level1();\n\ncanvas.addEventListener('click', (evt: MouseEvent) => {\n  let mousePos: Position = getMousePos(canvas, evt);\n  level.onCanvasClick(mousePos);\n});\n\nlevel.begin();"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","noun_color","verb_color","dialogue_color","card_width_unit","card_height","dialogue_font_size","dialogue_font","verb","sleep","ms","Promise","resolve","setTimeout","clearRect","rect","ctx","x","y","w","h","drawCardFromTopLeft","card","cardInfo","PartOfSpeech","fillStyle","cardWidth","Word","length","fillRect","fillText","drawHollowRect","color","lineWidth","beginPath","strokeStyle","stroke","cardArray","inventoryTailX","inventoryTailY","drawInventory","this","i","isSelected","addCard","push","inventoryX","inventoryY","verticalInterval","say","text","font","textSplit","str","N","arr","substring","splitString","currentText","j","partOfSpeech","drawSlot","centerX","centerY","drawCardFromCenter","InsertCard","RemoveCard","IsCardEqual","GetCardID","ID","HasCard","cardTable","Map","dialogueTable","inventory","Inventory","slotArray","Slot","typeWriter","TypeWriter","forEach","set","sentenceTable","dialogue","Dialogue","levelState","MeInspectRoom","MeInspectDoor","MoveToGot","begin","entrySequence","onCanvasClick","mousePos","pos","slot","isSlotFull","sentence","isSentenceMatch","isConditionMet","stateKey","Condition","SayDialogue","Consequence","CardID1","CardID2","CardID3","sentenceInfo","DialogueID","NewCardID","canvas","document","getElementById","getContext","level","Level1","addEventListener","evt","event","getBoundingClientRect","clientX","left","clientY","top","getMousePos"],"sourceRoot":""}