{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./src/GlobalSetting.ts","webpack:///./src/TypeDefinition.ts","webpack:///./src/Utility.ts","webpack:///./src/Inventory.ts","webpack:///./src/TypeWriter.ts","webpack:///./src/Slot.ts","webpack:///./src/Level1/Level1.ts","webpack:///./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// 名詞顏色\nexport const noun_color = \"#FC9B45\";\n// 動詞顏色\nexport const verb_color = \"#51A6FF\";\n// 對話框的文字顏色\nexport const dialogue_color = \"#FFFFFF\";\n// 卡片欄的背景\nexport const inventory_background_color = \"#BEBEBE\";\n// 詞卡的寬度單位。詞卡有n個字，則詞卡寬度為n * card_width_unit\nexport const card_width_unit = 50;\n// 詞卡的高度\nexport const card_height = 50;\n// 對話框的文字大小\nexport const dialogue_font_size = 30;\n// 對話框的文字字體\nexport const dialogue_font = `${dialogue_font_size}px Arial`;\n// 對話框的打字間隔，單位是ms\nexport const type_interval = 20;\n// 對話框的寬度，單位是字數\nexport const dialogue_width = 20;","export interface ILevel {\n    begin(): void;\n    onCanvasClick(mousePos: Position): void;\n}\n\nexport type SentenceKey = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n}\n\nexport const noun: string = \"名\";\nexport const verb: string = \"動\";\n\nexport type CardDef = {\n    ID: number;\n    Word: string;\n    PartOfSpeech: string;\n};\n\nexport type SentenceDef = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n    Condition: string;\n    NewCardID: number[];\n    DialogueID: number;\n    Consequence: string;\n}\n\nexport type DialogueDef = {\n    ID: number;\n    Dialogue: string;\n};\n\nexport type FallbackDef = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n    Condition: string;\n    FallbackDialogueID: number;\n};\n\nexport type Card = {\n    rect: Rect;\n    inventoryX: number;\n    inventoryY: number;\n    cardInfo: CardDef;\n    isSelected: boolean;\n}\n\nexport type Rect = {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n};\n\nexport type Position = {\n    x: number;\n    y: number;\n}","import { card_height, card_width_unit, dialogue_color, dialogue_font_size, noun_color, verb_color } from \"./GlobalSetting\";\nimport { Card, Position, Rect, verb } from \"./TypeDefinition\";\nimport { ctx } from \"./index\";\n\nexport async function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function clearRect(rect: Rect): void {\n    ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawCardFromTopLeft(card: Card): void {\n    if (card.cardInfo.PartOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = card_width_unit * card.cardInfo.Word.length;\n    ctx.fillRect(card.rect.x, card.rect.y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.cardInfo.Word, card.rect.x + (cardWidth - dialogue_font_size * card.cardInfo.Word.length) * .5, card.rect.y + 35);\n}\n\nexport function drawCardFromCenter(card: Card, centerX: number, centerY: number): void {\n    if (card.cardInfo.PartOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = 50 * card.cardInfo.Word.length;\n    let x = centerX - cardWidth * .5;\n    let y = centerY - card_height * .5;\n    ctx.fillRect(x, y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.cardInfo.Word, x + (cardWidth - dialogue_font_size * card.cardInfo.Word.length) * .5, y + 35);\n}\n\nexport function drawFilledRect(rect: Rect, color: string): void {\n    ctx.fillStyle = color;\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawHollowRect(rect: Rect, color: string, lineWidth: number): void {\n    ctx.beginPath();\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.stroke();\n}\n\nexport function splitString(str: string, N: number): string[] {\n    const arr = [];\n\n    for (let i = 0; i < str.length; i += N) {\n        arr.push(str.substring(i, i + N));\n    }\n\n    return arr;\n}\n\nexport function getMousePos(canvas: HTMLCanvasElement, event: MouseEvent): Position {\n    var rect = canvas.getBoundingClientRect();\n    return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top,\n    };\n}\n\nexport function isInside(pos: Position, rect: Rect): boolean {\n    return pos.x > rect.x && pos.x < rect.x + rect.w &&\n        pos.y < rect.y + rect.h && pos.y > rect.y;\n}\n","import { card_height, card_width_unit, inventory_background_color } from \"./GlobalSetting\";\nimport { Card, CardDef, Position, Rect } from \"./TypeDefinition\";\nimport { clearRect, drawCardFromTopLeft, drawFilledRect } from \"./Utility\";\n\nexport class Inventory {\n    public cardArray: Card[] = [];\n\n    private readonly originTail: Position = {x:110, y: 350};\n    private currentTail: Position;\n    private readonly rect: Rect = {\n        x: 100,\n        y: 340,\n        w: 600,\n        h: 220\n    };\n\n    constructor(){\n        this.currentTail = {\n            x: this.originTail.x,\n            y: this.originTail.y\n        };\n    }\n\n    public drawInventory(): void {\n        clearRect(this.rect);\n        drawFilledRect(this.rect, inventory_background_color)\n        for (let i = 0; i < this.cardArray.length; i++) {\n            if (this.cardArray[i].isSelected) continue;\n            drawCardFromTopLeft(this.cardArray[i]);\n        }\n    }\n\n    public addCard(cardInfo: CardDef): void {\n        let cardWidth = card_width_unit * cardInfo.Word.length;\n        let nextTailX = this.currentTail.x + 10 + cardWidth;\n        if (nextTailX > 700) {\n            this.currentTail.y += 10 + card_height;\n            this.currentTail.x = this.originTail.x;\n        }\n        this.cardArray.push({\n            rect: {\n                x: this.currentTail.x,\n                y: this.currentTail.y,\n                w: cardWidth,\n                h: card_height,\n            },\n            inventoryX: this.currentTail.x,\n            inventoryY: this.currentTail.y,\n            cardInfo: cardInfo,\n            isSelected: false\n        });\n        this.currentTail.x += cardWidth + 10;\n    }\n}","import { dialogue_font, dialogue_width, dialogue_color, type_interval, dialogue_font_size } from \"./GlobalSetting\";\nimport { Rect } from \"./TypeDefinition\";\nimport { clearRect, splitString, sleep } from \"./Utility\";\nimport { ctx } from \"./index\";\n\nexport class TypeWriter {\n    private rect: Rect;\n    private readonly verticalInterval: number = 5;\n\n    constructor(rect: Rect) {\n        this.rect = rect;\n    }\n\n    public async say(text: string): Promise<void> {\n        clearRect(this.rect);\n        ctx.font = dialogue_font;\n        let textSplit = splitString(text, dialogue_width);\n        for (let i = 0; i < textSplit.length; i++) {\n            let currentText = textSplit[i];\n            for (let j = 1; j <= currentText.length; j++) {\n                ctx.fillStyle = dialogue_color;\n                ctx.fillText(currentText.substring(0, j), this.rect.x,\n                    // fillText是以y的上界為底線畫文字。所以畫文字時，y要加一個dialogue_font_size\n                    this.rect.y + dialogue_font_size + (dialogue_font_size + this.verticalInterval) * i);\n                await sleep(type_interval);\n            }\n        }\n    }\n}","import { verb_color, noun_color } from \"./GlobalSetting\";\nimport { Card, Rect, verb } from \"./TypeDefinition\";\nimport { clearRect, drawCardFromCenter, drawHollowRect } from \"./Utility\";\n\nexport class Slot {\n    public rect: Rect;\n    public partOfSpeech: string;\n    private card: Card;\n    private readonly lineWidth = 6;\n\n    constructor(rect: Rect, partOfSpeech: string, card: Card) {\n        this.rect = rect;\n        this.partOfSpeech = partOfSpeech;\n        this.card = card;\n    }\n\n    public drawSlot(): void {\n        clearRect(this.rect);\n        if (this.partOfSpeech == verb) {\n            drawHollowRect(this.rect, verb_color, this.lineWidth);\n        } else {\n            drawHollowRect(this.rect, noun_color, this.lineWidth);\n        }\n        if (this.card) {\n            drawCardFromCenter(this.card, this.rect.x + this.rect.w * .5, this.rect.y + this.rect.h * .5);\n        }\n    }\n\n    public InsertCard(card: Card): void {\n        this.card = card;\n        card.isSelected = true;\n        card.rect.x = this.rect.x + (this.rect.w - card.rect.w) * .5;\n        card.rect.y = this.rect.y;\n    }\n\n    public RemoveCard(): void {\n        this.card = null;\n    }\n\n    public IsCardEqual(card: Card): boolean {\n        return this.card == card;\n    }\n\n    public GetCardID(): number {\n        if (!this.card) return -1;\n        return this.card.cardInfo.ID;\n    }\n\n    public HasCard(): boolean {\n        return this.card != null;\n    }\n}","import { Inventory } from \"../Inventory\";\nimport { TypeWriter } from \"../TypeWriter\";\nimport { CardDef, DialogueDef, FallbackDef, ILevel, Position, SentenceDef, noun, verb } from \"../TypeDefinition\";\nimport { isInside } from \"../Utility\";\nimport { Slot } from \"../Slot\";\nimport cardTableJson from './CardTable.json';\nimport dialogueTableJson from './DialogueTable.json';\nimport sentenceTableJson from './SentenceTable.json';\nimport fallbackTableJson from './FallbackTable.json';\nimport stateInitTableJson from './StateInitTable.json';\n\nexport class Level1 implements ILevel {\n    private readonly inventory: Inventory;\n    private readonly slotArray: Slot[];\n    private readonly typeWriter: TypeWriter;\n    private readonly cardTable = new Map<number, CardDef>();\n    private readonly sentenceTable: SentenceDef[];\n    private readonly fallbackTable: FallbackDef[];\n    private readonly dialogueTable = new Map<number, string>();\n    private readonly stateInitTable: { [k: string]: any }[];\n    private isSaying: boolean = false;\n    private isTheEnd: boolean = false;\n\n    constructor() {\n        this.inventory = new Inventory();\n        this.slotArray = [\n            new Slot({ x: 145, y: 270, w: 150, h: 50, }, noun, null),\n            new Slot({ x: 325, y: 270, w: 150, h: 50 }, verb, null),\n            new Slot({ x: 505, y: 270, w: 150, h: 50 }, noun, null)\n        ];\n        this.typeWriter = new TypeWriter({ x: 100, y: 70, w: 600, h: 190 });\n\n        let cardTableRaw: CardDef[] = cardTableJson as CardDef[];\n\n        cardTableRaw.forEach(card => {\n            this.cardTable.set(card.ID, card);\n        });\n\n        this.sentenceTable = sentenceTableJson as SentenceDef[];\n        this.fallbackTable = fallbackTableJson as FallbackDef[];\n\n        let dialogueTableRaw: DialogueDef[] = dialogueTableJson as DialogueDef[];\n        dialogueTableRaw.forEach(dialogue => {\n            this.dialogueTable.set(dialogue.ID, dialogue.Dialogue);\n        });\n\n        this.stateInitTable = stateInitTableJson as { [k: string]: any }[];\n\n        for (let i = 0; i < this.stateInitTable.length; i++) {\n            new Function(this.stateInitTable[i][\"StateName\"] + \"=\" +\n                this.stateInitTable[i][\"StateInit\"])();\n        }\n    }\n\n    public begin(): void {\n        this.entrySequence();\n    }\n\n    private async entrySequence(): Promise<void> {\n        for (let i = 0; i < this.slotArray.length; i++) {\n            this.slotArray[i].drawSlot();\n        }\n        this.inventory.drawInventory();\n        await this.typeWriter.say(this.dialogueTable.get(0));\n        this.inventory.addCard(this.cardTable.get(2));\n        this.inventory.addCard(this.cardTable.get(0));\n        this.inventory.addCard(this.cardTable.get(1));\n        this.inventory.drawInventory();\n    }\n\n    public onCanvasClick(mousePos: Position): void {\n        // 遊戲結束時阻擋點擊。\n        if (this.isTheEnd) return;\n        // 說話時不接受點擊。\n        if (this.isSaying) return;\n        this.inventory.cardArray.forEach(card => {\n            if (!isInside(mousePos, card.rect)) return;\n            // 如果點選到的詞卡已經輸入，則把詞卡放回inventory。\n            if (card.isSelected) {\n                card.rect.x = card.inventoryX;\n                card.rect.y = card.inventoryY;\n                card.isSelected = false;\n                for (let i = 0; i < this.slotArray.length; i++) {\n                    if (this.slotArray[i].IsCardEqual(card)) {\n                        this.slotArray[i].RemoveCard();\n                        this.slotArray[i].drawSlot();\n                        this.inventory.drawInventory();\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // 如果輸入框已經滿了。就不再檢查造句。\n            if (this.isSlotFull()) return;\n\n            // 如果點選到的詞卡還沒有輸入，尋找一個空的slot輸入。\n            for (let i = 0; i < this.slotArray.length; i++) {\n                let slot = this.slotArray[i];\n                if (slot.partOfSpeech == card.cardInfo.PartOfSpeech) {\n                    if (slot.IsCardEqual(null)) {\n                        slot.InsertCard(card);\n                        slot.drawSlot();\n                        this.inventory.drawInventory();\n                        break;\n                    }\n                }\n            }\n\n            if (!this.isSlotFull()) return;\n            // 如果三個輸入框都滿了。檢查造句。\n            // 先檢查是否滿足fallback條件\n            for (let i = 0; i < this.fallbackTable.length; i++) {\n                let fallback: FallbackDef = this.fallbackTable[i];\n                if (!this.isFallbackMatch(fallback)) continue;\n                if (!this.runLogicalExpression(fallback.Condition)) continue;\n\n                this.SayDialogue(fallback.FallbackDialogueID);\n                return;\n            }\n\n            for (let i = 0; i < this.sentenceTable.length; i++) {\n                let sentence: SentenceDef = this.sentenceTable[i];\n                if (!this.isSentenceMatch(sentence)) continue;\n                if (!this.runLogicalExpression(sentence.Condition)) continue;\n\n                this.SayDialogue(sentence.DialogueID).then(() => {\n                    this.CheckNewCard(sentence);\n                });\n\n                if (sentence.Consequence) {\n                    Function(`\"use strict\";${sentence.Consequence}`)();\n                    // 檢查是否已經遊戲結束。\n                    if (Function(\"return TheEnd\")()) {\n                        this.isTheEnd = true;\n                    }\n                }\n                break;\n            }\n        });\n    }\n\n    private isSlotFull(): boolean {\n        return this.slotArray[0].HasCard() &&\n            this.slotArray[1].HasCard() &&\n            this.slotArray[2].HasCard();\n    }\n\n    private isSentenceMatch(sentence: { CardID1: number, CardID2: number, CardID3: number }): boolean {\n        return sentence.CardID1 == this.slotArray[0].GetCardID() &&\n            sentence.CardID2 == this.slotArray[1].GetCardID() &&\n            sentence.CardID3 == this.slotArray[2].GetCardID();\n    }\n\n    private isFallbackMatch(sentence: { CardID1: number, CardID2: number, CardID3: number }): boolean {\n        return (!sentence.CardID1 || sentence.CardID1 == this.slotArray[0].GetCardID()) &&\n            (!sentence.CardID2 || sentence.CardID2 == this.slotArray[1].GetCardID()) &&\n            (!sentence.CardID3 || sentence.CardID3 == this.slotArray[2].GetCardID());\n    }\n\n    private async SayDialogue(dialogueID: number): Promise<void> {\n        this.isSaying = true;\n        await this.typeWriter.say(this.dialogueTable.get(dialogueID));\n        this.isSaying = false;\n    }\n\n    private CheckNewCard(sentenceInfo: SentenceDef): void {\n        if (sentenceInfo.NewCardID) {\n            for (let i = 0; i < sentenceInfo.NewCardID.length; i++) {\n                this.inventory.addCard(this.cardTable.get(sentenceInfo.NewCardID[i]));\n            }\n            this.inventory.drawInventory();\n        }\n    }\n\n    private runLogicalExpression(str: string): boolean {\n        if (!str) return true;\n        return new Function(\"return \" + str)();\n    }\n}","import { Level1 } from \"./Level1/Level1\";\nimport { ILevel, Position } from \"./TypeDefinition\";\nimport { getMousePos } from \"./Utility\";\n\nlet canvas: HTMLCanvasElement = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\nexport let ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\nlet level: ILevel = new Level1();\n\ncanvas.addEventListener('click', (evt: MouseEvent) => {\n  let mousePos: Position = getMousePos(canvas, evt);\n  level.onCanvasClick(mousePos);\n});\n\nlevel.begin();"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","noun_color","verb_color","dialogue_color","card_width_unit","card_height","dialogue_font_size","dialogue_font","verb","sleep","ms","Promise","resolve","setTimeout","clearRect","rect","ctx","x","y","w","h","drawCardFromTopLeft","card","cardInfo","PartOfSpeech","fillStyle","cardWidth","Word","length","fillRect","fillText","drawHollowRect","color","lineWidth","beginPath","strokeStyle","stroke","cardArray","originTail","this","currentTail","drawInventory","i","isSelected","addCard","push","inventoryX","inventoryY","verticalInterval","say","text","font","textSplit","str","N","arr","substring","splitString","currentText","j","partOfSpeech","drawSlot","centerX","centerY","drawCardFromCenter","InsertCard","RemoveCard","IsCardEqual","GetCardID","ID","HasCard","cardTable","Map","dialogueTable","isSaying","isTheEnd","inventory","Inventory","slotArray","Slot","typeWriter","TypeWriter","forEach","set","sentenceTable","fallbackTable","dialogue","Dialogue","stateInitTable","Function","begin","entrySequence","onCanvasClick","mousePos","pos","isSlotFull","slot","fallback","isFallbackMatch","runLogicalExpression","Condition","SayDialogue","FallbackDialogueID","sentence","isSentenceMatch","DialogueID","then","CheckNewCard","Consequence","CardID1","CardID2","CardID3","dialogueID","sentenceInfo","NewCardID","canvas","document","getElementById","getContext","level","Level1","addEventListener","evt","event","getBoundingClientRect","clientX","left","clientY","top","getMousePos"],"sourceRoot":""}