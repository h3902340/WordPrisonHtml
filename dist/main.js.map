{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/webpack/runtime/define property getters","webpack://my-webpack-project/webpack/runtime/hasOwnProperty shorthand","webpack://my-webpack-project/./src/GlobalSetting.ts","webpack://my-webpack-project/./src/TypeDefinition.ts","webpack://my-webpack-project/./src/Utility.ts","webpack://my-webpack-project/./src/Inventory.ts","webpack://my-webpack-project/./src/Slot.ts","webpack://my-webpack-project/./src/Level1/Level1.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// 名詞顏色\nexport const noun_color = \"#FC9B45\";\n// 動詞顏色\nexport const verb_color = \"#51A6FF\";\n// 對話框的文字顏色\nexport const dialogue_color = \"#FFFFFF\";\n// 卡片欄的背景\nexport const inventory_background_color = \"#BEBEBE\";\n// 詞卡的寬度單位。詞卡有n個字，則詞卡寬度為n * card_width_unit\nexport const card_width_unit = 50;\n// 詞卡的高度\nexport const card_height = 50;\n// 對話框的文字大小\nexport const dialogue_font_size = 30;\n// 對話框的文字字體\nexport const dialogue_font = `${dialogue_font_size}px Arial`;\n// 對話框的打字間隔，單位是ms\nexport const type_interval = 40;\n// 對話框的寬度，單位是字數\nexport const dialogue_width = 20;","export interface ILevel {\n    begin(): void;\n    onCanvasClick(mousePos: Position): void;\n}\n\nexport type LevelTable = {\n    CardTable: CardDef[];\n    SentenceTable: SentenceDef[];\n    DialogueTable: DialogueDef[];\n}\n\nexport type CardValue = {\n    Word: string;\n    PartOfSpeech: string;\n}\n\nexport type SentenceKey = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n    Status: string;\n}\n\nexport type SentenceValue = {\n    NewCardID: number[];\n    DialogueID: number;\n}\n\nexport const noun: string = \"名\";\nexport const verb: string = \"動\";\n\nexport type CardDef = {\n    ID: number;\n    Word: string;\n    PartOfSpeech: string;\n};\n\nexport type SentenceDef = {\n    CardID1: number;\n    CardID2: number;\n    CardID3: number;\n    Status: string;\n    NewCardID: number[];\n    DialogueID: number;\n}\n\nexport type DialogueDef = {\n    ID: number;\n    Dialogue: string;\n};\n\nexport type Card = {\n    rect: Rect;\n    inventoryX: number;\n    inventoryY: number;\n    word: string;\n    partOfSpeech: string;\n    isSelected: boolean;\n}\n\nexport type Rect = {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n};\n\nexport type Position = {\n    x: number;\n    y: number;\n}","import { card_height, card_width_unit, dialogue_color, dialogue_font, dialogue_font_size, dialogue_width, noun_color, type_interval, verb_color } from \"./GlobalSetting\";\nimport { Card, Position, Rect, verb } from \"./TypeDefinition\";\nimport { ctx } from \"./index\";\n\nexport async function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function clearRect(rect: Rect): void {\n    ctx.clearRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawCardFromTopLeft(card: Card): void {\n    if (card.partOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = card_width_unit * card.word.length;\n    ctx.fillRect(card.rect.x, card.rect.y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.word, card.rect.x + (cardWidth - dialogue_font_size * card.word.length) * .5, card.rect.y + 35);\n}\n\nexport function drawCardFromCenter(card: Card, centerX: number, centerY: number): void {\n    if (card.partOfSpeech == verb) {\n        ctx.fillStyle = verb_color;\n    } else {\n        ctx.fillStyle = noun_color;\n    }\n    let cardWidth = 50 * card.word.length;\n    let x = centerX - cardWidth * .5;\n    let y = centerY - card_height * .5;\n    ctx.fillRect(x, y, cardWidth, card_height);\n    ctx.fillStyle = dialogue_color;\n    ctx.fillText(card.word, x + (cardWidth - dialogue_font_size * card.word.length) * .5, y + 35);\n}\n\nexport function drawFilledRect(rect: Rect, color: string): void {\n    ctx.fillStyle = color;\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\n}\n\nexport function drawHollowRect(rect: Rect, color: string, lineWidth: number): void {\n    ctx.beginPath();\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.stroke();\n}\n\nexport function splitString(str: string, N: number): string[] {\n    const arr = [];\n\n    for (let i = 0; i < str.length; i += N) {\n        arr.push(str.substring(i, i + N));\n    }\n\n    return arr;\n}\n\nexport async function say(text: string): Promise<void> {\n    ctx.font = dialogue_font;\n    let textSplit = splitString(text, dialogue_width);\n    for (let i = 0; i < textSplit.length; i++) {\n        let currentText = textSplit[i];\n        for (let j = 1; j <= currentText.length; j++) {\n            ctx.fillStyle = dialogue_color;\n            ctx.fillText(currentText.substring(0, j), 100, 100 + 35 * i);\n            await sleep(type_interval);\n        }\n    }\n}\n\nexport function getMousePos(canvas: HTMLCanvasElement, event: MouseEvent): Position {\n    var rect = canvas.getBoundingClientRect();\n    return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top,\n    };\n}\n\nexport function isInside(pos: Position, rect: Rect): boolean {\n    return pos.x > rect.x && pos.x < rect.x + rect.w &&\n        pos.y < rect.y + rect.h && pos.y > rect.y;\n}\n","import { card_height, card_width_unit, inventory_background_color } from \"./GlobalSetting\";\nimport { Card, CardValue, Rect } from \"./TypeDefinition\";\nimport { clearRect, drawCardFromTopLeft, drawFilledRect } from \"./Utility\";\n\nexport class Inventory {\n    public cardArray: Card[] = [];\n\n    private inventoryTailX: number = 110;\n    private inventoryTailY: number = 350;\n    private readonly rect: Rect = {\n        x: 100,\n        y: 340,\n        w: 600,\n        h: 220\n    };\n\n    public drawInventory(): void {\n        clearRect(this.rect);\n        drawFilledRect(this.rect, inventory_background_color)\n        for (let i = 0; i < this.cardArray.length; i++) {\n            if (this.cardArray[i].isSelected) continue;\n            drawCardFromTopLeft(this.cardArray[i]);\n        }\n    }\n\n    public addCard(cardInfo: CardValue): void {\n        let cardWidth = card_width_unit * cardInfo.Word.length;\n        let nextTailX = this.inventoryTailX + 10 + cardWidth;\n        if (nextTailX > 600) {\n            this.inventoryTailY += 10 + card_height;\n        }\n        this.cardArray.push({\n            rect: {\n                x: this.inventoryTailX,\n                y: this.inventoryTailY,\n                w: cardWidth,\n                h: card_height,\n            },\n            inventoryX: this.inventoryTailX,\n            inventoryY: this.inventoryTailY,\n            word: cardInfo.Word,\n            partOfSpeech: cardInfo.PartOfSpeech,\n            isSelected: false\n        });\n        this.inventoryTailX = this.inventoryTailX + cardWidth + 10;\n    }\n}","import { verb_color, noun_color } from \"./GlobalSetting\";\nimport { Card, Rect, verb } from \"./TypeDefinition\";\nimport {clearRect, drawCardFromCenter, drawHollowRect} from \"./Utility\";\n\nexport class Slot{\n    public rect: Rect;\n    public partOfSpeech: string;\n    public card: Card;\n    private readonly lineWidth = 6;\n\n    constructor(rect: Rect, partOfSpeech: string, card: Card){\n        this.rect = rect;\n        this.partOfSpeech = partOfSpeech;\n        this.card = card;\n    }\n\n    public drawSlot(): void {\n        clearRect(this.rect);\n        if (this.partOfSpeech == verb) {\n            drawHollowRect(this.rect, verb_color, this.lineWidth);\n        } else {\n            drawHollowRect(this.rect, noun_color, this.lineWidth);\n        }\n        if (this.card) {\n            drawCardFromCenter(this.card, this.rect.x + this.rect.w * .5, this.rect.y + this.rect.h * .5);\n        }\n    }\n}","import { Inventory } from \"../Inventory\";\nimport { CardValue, ILevel, LevelTable, Position, SentenceKey, SentenceValue, noun, verb } from \"../TypeDefinition\";\nimport { say, isInside } from \"../Utility\";\nimport { Slot } from \"../Slot\";\nimport levelTableJson from './Level1Table.json';\n\nexport class Level1 implements ILevel {\n    private inventory: Inventory;\n    private slotArray: Slot[];\n    private readonly cardTable = new Map<number, CardValue>();\n    private readonly sentenceTable = new Map<SentenceKey, SentenceValue>();\n    private readonly dialogueTable = new Map<number, string>();\n\n    constructor() {\n        this.inventory = new Inventory();\n        this.slotArray = [\n            new Slot({ x: 145, y: 270, w: 150, h: 50, }, noun, null),\n            new Slot({ x: 325, y: 270, w: 150, h: 50 }, verb, null),\n            new Slot({ x: 505, y: 270, w: 150, h: 50 }, noun, null)\n        ];\n        let levelTableRaw: LevelTable = levelTableJson as LevelTable;\n\n        levelTableRaw.CardTable.forEach(card => {\n            this.cardTable.set(card.ID, {\n                Word: card.Word,\n                PartOfSpeech: card.PartOfSpeech\n            });\n        });\n        levelTableRaw.SentenceTable.forEach(sentence => {\n            this.sentenceTable.set({\n                CardID1: sentence.CardID1,\n                CardID2: sentence.CardID2,\n                CardID3: sentence.CardID3,\n                Status: sentence.Status,\n            }, {\n                NewCardID: sentence.NewCardID,\n                DialogueID: sentence.DialogueID\n            });\n        });\n        levelTableRaw.DialogueTable.forEach(dialogue => {\n            this.dialogueTable.set(dialogue.ID, dialogue.Dialogue);\n        });\n\n        console.log(\"Hello!\" + new Error().stack);\n    }\n\n    public begin(): void {\n        this.entrySequence();\n    }\n\n    private async entrySequence(): Promise<void> {\n        this.drawLevel();\n        await say(this.dialogueTable.get(0));\n        this.inventory.addCard(this.cardTable.get(2));\n        this.inventory.addCard(this.cardTable.get(0));\n        this.inventory.addCard(this.cardTable.get(1));\n        this.drawLevel();\n    }\n\n    public onCanvasClick(mousePos: Position): void {\n        this.inventory.cardArray.forEach(card => {\n            if (!isInside(mousePos, card.rect)) return;\n            let needToRedrawLevel = false;\n            if (card.isSelected) {\n                card.rect.x = card.inventoryX;\n                card.rect.y = card.inventoryY;\n                card.isSelected = false;\n                for (let i = 0; i < this.slotArray.length; i++) {\n                    if (this.slotArray[i].card == card) {\n                        this.slotArray[i].card = null;\n                        break;\n                    }\n                }\n                needToRedrawLevel = true;\n            } else {\n                for (let i = 0; i < this.slotArray.length; i++) {\n                    let slot = this.slotArray[i];\n                    if (slot.partOfSpeech == card.partOfSpeech) {\n                        if (!slot.card) {\n                            slot.card = card;\n                            card.isSelected = true;\n                            card.rect.x = slot.rect.x + (slot.rect.w - card.rect.w) * .5;\n                            card.rect.y = slot.rect.y;\n                            needToRedrawLevel = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (needToRedrawLevel) {\n                this.drawLevel();\n            }\n        });\n    }\n\n    private drawLevel(): void {\n        for (let i = 0; i < this.slotArray.length; i++) {\n            this.slotArray[i].drawSlot();\n        }\n        this.inventory.drawInventory();\n    }\n}","import { Level1 } from \"./Level1/Level1\";\nimport { ILevel, Position } from \"./TypeDefinition\";\nimport { getMousePos } from \"./Utility\";\n\nlet canvas: HTMLCanvasElement = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\nexport let ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\nlet level: ILevel = new Level1();\n\ncanvas.addEventListener('click', (evt: MouseEvent) => {\n  let mousePos: Position = getMousePos(canvas, evt);\n  level.onCanvasClick(mousePos);\n});\n\nlevel.begin();"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","noun_color","verb_color","dialogue_color","card_width_unit","card_height","dialogue_font","verb","sleep","ms","Promise","resolve","setTimeout","clearRect","rect","ctx","x","y","w","h","drawCardFromTopLeft","card","partOfSpeech","fillStyle","cardWidth","word","length","fillRect","fillText","drawHollowRect","color","lineWidth","beginPath","strokeStyle","stroke","say","text","font","textSplit","str","N","arr","i","push","substring","splitString","currentText","j","cardArray","inventoryTailX","inventoryTailY","drawInventory","this","isSelected","addCard","cardInfo","Word","inventoryX","inventoryY","PartOfSpeech","drawSlot","centerX","centerY","drawCardFromCenter","cardTable","Map","sentenceTable","dialogueTable","inventory","Inventory","slotArray","Slot","levelTableRaw","CardTable","forEach","set","ID","SentenceTable","sentence","CardID1","CardID2","CardID3","Status","NewCardID","DialogueID","DialogueTable","dialogue","Dialogue","console","log","Error","stack","begin","entrySequence","drawLevel","onCanvasClick","mousePos","pos","needToRedrawLevel","slot","canvas","document","getElementById","getContext","level","Level1","addEventListener","evt","event","getBoundingClientRect","clientX","left","clientY","top","getMousePos"],"sourceRoot":""}